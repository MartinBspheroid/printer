
float radians(float degrees){
	return degrees * (3.14/180);
}

string con(const string data) {
	return data + "!!!";
}

int testInclude() {
	return 1;
}

void  setInputSize(int x1, int y1, int x2, int y2 ) {
	send("IP" + toString(x1) + "," + toString(y1) + "," + toString(x2) + "," + toString(y2) + ";\n");
}
void  setScale(int  x, int y )	{
	send("SC0," + toString(x) + ",0," + toString(y) + ";\n");
}
void drawLine(float x1, float y1, float x2, float y2){
	move(x1, y1);
	penDown();
	move(x2, y2);
	penUp();
}
void drawLineTo(float x, float y){
move(x, y);
}
void beginLine(float x, float y){
move(x, y);
penDown();
}
void endLine(float x, float y){
move(x, y);
penUp();
}

void  penUp() {
	send( "PU;\n");
}

void  penDown() {
	send("PD;\n");
}

void  init() {
	send("IN;\n");
}

void  setCircleTolerance(int tolerance) {
	send("CT " + tolerance + ";\n");
}

void  drawCircle( int x, int y, int radius ) {
	move(x, y);
	penDown();
	send("CI " + radius + ";\n");
	penUp();
}
void drawSpline( int x1, int y1, int x2, int y2, int angle ) {
	move(x1, y1);
	penDown();
	send("AA" + toString(x2) + "," + toString(y2) + "," + toString(angle) + ";\n");
	penUp();
}

void  move(int x, int y ) {
	send("PA" + toString(x) + "," + toString(y) + ";\n");
}

void  selectPen(int number) {
	print("selected pen" + toString(number));
	send("SP" + toString(number) + ";\n");
}

void  changeLineType( int lineType ) {
	send("LT " + toString(lineType) + ", 25;\n");
}
// FT (model (,space (,angle)));
void setFillType(int model, int space, int angle){
	send("FT " + toString(model)+ "," + toString(space)+/* "," + toString(angle)+ */";\n");
}
//  -PT(Pen Thickness)
void setPenThickness(float thicknes){
	send("PT "+ toString(thicknes)+ ";\n");
}

void drawFillWedge(int x, int y, int radius, int startingAngle, int centralAngle, int resolution){
	move(x, y);
	send("WG "+toString(radius)+ "," + toString(startingAngle) + "," + toString(centralAngle) + "," + toString(resolution)+ ";\n");
}

//-EW(Edge Wedge)
void drawStrokedWedge(int x, int y, int radius, int startingAngle, int centralAngle, int resolution){
	move(x, y);
	send("EW "+toString(radius)+ "," + toString(startingAngle) + "," + toString(centralAngle) + "," + toString(resolution)+ ";\n");
}

//-RA(Fill Rectangle Absolute)
void drawRectangle(int x1, int y1, int x2, int y2){
	move(x1, y1);
	send("RA" + toString(x2) +","+ toString(y2) + ";\n");
}


string toString(int data) {
	return formatInt(data, 'l', 2);
}
// TODO this needs testing
string toString(float data){
	return formatFloat(data, '0', 8, 0);
}




//HP-GL Reference GuideReturns to "HPGL/Vector/Image Viewer PloView" HP

 //This "HP-GL Reference Guide" is described only within the HP-GL command and parameter which are often used. The HP-GL sample has carried the result displayed by PloView.


	//  -IN(Initialize)
	//  -DF(Defalt)
	//  -IP(Input P1 and P2)
	//  -SC(Scale)
	// 4. Basic Plot Command
	//  -SP(Select Pen)
	//  -PU(Pen Up)
	//  -PD(Pen Down)
	//  -PA(Plot Absolute)
	//  -PR(Plot Relative)
	//  -LT(Line Type)
	//  -CT(Chord Tolerance)
	//  -CI(Circle)
	//  -AA(Arc Absolute)
	//  -AR(Arc Relative)
	//  -FT(Fill Type)----
	//  -PT(Pen Thickness)----
	//  -WG(Fill Wedge) ----
	//  -EW(Edge Wedge) ----
	//  -RA(Fill Absolute)
//  -EA(Edge Rectangle Absolute)
//  -RR(Fill Rectangle Relative)
//  -ER(Edge Rectangle Relative)
//  -PM(Polygon Mode)
//  -EP(Edge Polygon)
//  -FP(Fill Polygon)
// 6. Character Plot Command
//  -LB(Label)
//  -DT(Define Terminator)
//  -SI(Absolute Character Size)
//  -SR(Relative Character Size)
//  -SU(User Unit Character Size)
//  -SL(Character Slant)
//  -DI(Absolute Direction)
//  -DR(Relative Direction)
//  -DU(User Unit Direction)
//  -DV(Vertical Label Direction)
//  -LO(Label origin)
//  -CP(Character Plot)
//  -ES(Extra Space)
//  -BL(Buffer Label)
//  -PB(Print Bufferd Label)
//  -CS(Designate Standard Character Set)
//  -CA(Designate Alternate Character Set)
//  -SS(Select Standard Character set)
//  -SA(Select Alternate Character Set)
// 7. Change of Plot Area
//  -IW(Input window)
//  -RO(Rotate Coodinate System)
// 8. Plotter Control
//  -PG(Page)
//  -AF(Advance Full Page)
//  -NR(Not Ready)
//  -PS(Paper Soze)
